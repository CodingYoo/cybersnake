const t=new class{constructor(){this.audioContext=null,this.masterVolume=.3,this.sounds=new Map,this.isEnabled=!0,this.init()}init(){try{const t=window.AudioContext||window.webkitAudioContext;this.audioContext=new t,this.masterGain=this.audioContext.createGain(),this.masterGain.gain.value=this.masterVolume,this.masterGain.connect(this.audioContext.destination),console.log("ðŸ”Š Audio Manager initialized")}catch(t){console.warn("Audio not supported:",t),this.isEnabled=!1}}resume(){this.audioContext&&"suspended"===this.audioContext.state&&this.audioContext.resume()}setMasterVolume(t){this.masterVolume=Math.max(0,Math.min(1,t)),this.masterGain&&(this.masterGain.gain.value=this.masterVolume)}toggleSound(){return this.isEnabled=!this.isEnabled,this.masterGain&&(this.masterGain.gain.value=this.isEnabled?this.masterVolume:0),this.isEnabled}playStartupSound(){if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,e=this.audioContext.createOscillator(),a=this.audioContext.createGain();e.type="sawtooth",e.frequency.setValueAtTime(40,t),e.frequency.exponentialRampToValueAtTime(80,t+2),a.gain.setValueAtTime(0,t),a.gain.linearRampToValueAtTime(.3,t+.1),a.gain.exponentialRampToValueAtTime(.01,t+2),e.connect(a),a.connect(this.masterGain),e.start(t),e.stop(t+2);const i=this.audioContext.createOscillator(),s=this.audioContext.createGain();i.type="sine",i.frequency.setValueAtTime(2e3,t+.5),i.frequency.exponentialRampToValueAtTime(4e3,t+1.5),s.gain.setValueAtTime(0,t+.5),s.gain.linearRampToValueAtTime(.2,t+.6),s.gain.exponentialRampToValueAtTime(.01,t+1.5),i.connect(s),s.connect(this.masterGain),i.start(t+.5),i.stop(t+1.5)}playEatSound(){if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,e=.2,a=this.audioContext.createOscillator(),i=this.audioContext.createGain();a.type="square",a.frequency.setValueAtTime(800,t),a.frequency.exponentialRampToValueAtTime(1200,t+e),i.gain.setValueAtTime(.4,t),i.gain.exponentialRampToValueAtTime(.01,t+e),a.connect(i),i.connect(this.masterGain),a.start(t),a.stop(t+e);const s=this.audioContext.createOscillator(),o=this.audioContext.createGain();s.type="sine",s.frequency.setValueAtTime(1600,t),s.frequency.exponentialRampToValueAtTime(2400,t+e),o.gain.setValueAtTime(.2,t),o.gain.exponentialRampToValueAtTime(.01,t+e),s.connect(o),o.connect(this.masterGain),s.start(t),s.stop(t+e)}playGameOverSound(){if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,e=1.5,a=this.audioContext.createOscillator(),i=this.audioContext.createGain();a.type="sawtooth",a.frequency.setValueAtTime(400,t),a.frequency.exponentialRampToValueAtTime(100,t+e),i.gain.setValueAtTime(.5,t),i.gain.linearRampToValueAtTime(.3,t+.5),i.gain.exponentialRampToValueAtTime(.01,t+e),a.connect(i),i.connect(this.masterGain),a.start(t),a.stop(t+e);const s=this.createNoise(),o=this.audioContext.createGain(),n=this.audioContext.createBiquadFilter();n.type="lowpass",n.frequency.setValueAtTime(2e3,t),n.frequency.exponentialRampToValueAtTime(200,t+e),o.gain.setValueAtTime(0,t+.2),o.gain.linearRampToValueAtTime(.1,t+.3),o.gain.exponentialRampToValueAtTime(.01,t+e),s.connect(n),n.connect(o),o.connect(this.masterGain),s.start(t+.2),s.stop(t+e)}playMoveSound(){if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,e=this.audioContext.createOscillator(),a=this.audioContext.createGain();e.type="sine",e.frequency.setValueAtTime(200,t),a.gain.setValueAtTime(.1,t),a.gain.exponentialRampToValueAtTime(.01,t+.05),e.connect(a),a.connect(this.masterGain),e.start(t),e.stop(t+.05)}playClickSound(){if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.currentTime,e=this.audioContext.createOscillator(),a=this.audioContext.createGain();e.type="square",e.frequency.setValueAtTime(1e3,t),e.frequency.exponentialRampToValueAtTime(1500,t+.1),a.gain.setValueAtTime(.3,t),a.gain.exponentialRampToValueAtTime(.01,t+.1),e.connect(a),a.connect(this.masterGain),e.start(t),e.stop(t+.1)}createNoise(){const t=.1*this.audioContext.sampleRate,e=this.audioContext.createBuffer(1,t,this.audioContext.sampleRate),a=e.getChannelData(0);for(let s=0;s<t;s++)a[s]=2*Math.random()-1;const i=this.audioContext.createBufferSource();return i.buffer=e,i}playAmbientSound(){if(!this.isEnabled||!this.audioContext)return;const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.type="sine",t.frequency.setValueAtTime(60,this.audioContext.currentTime),e.gain.setValueAtTime(.05,this.audioContext.currentTime),t.connect(e),e.connect(this.masterGain),t.start(),this.ambientOsc=t,this.ambientGain=e}stopAmbientSound(){this.ambientOsc&&(this.ambientOsc.stop(),this.ambientOsc=null,this.ambientGain=null)}};const e=new class{constructor(){this.storageKey="cybersnake_leaderboard",this.maxRecords=10,this.scores=this.loadScores()}loadScores(){try{const t=localStorage.getItem(this.storageKey);if(t){const e=JSON.parse(t);return Array.isArray(e)?e:[]}}catch(t){console.warn("Failed to load scores:",t)}return[]}saveScores(){try{localStorage.setItem(this.storageKey,JSON.stringify(this.scores))}catch(t){console.warn("Failed to save scores:",t)}}addScore(t,e="Anonymous"){const a={score:t,player:e,date:(new Date).toISOString(),timestamp:Date.now()};this.scores.push(a),this.scores.sort((t,e)=>e.score-t.score),this.scores=this.scores.slice(0,this.maxRecords),this.saveScores();return this.scores.findIndex(t=>t.timestamp===a.timestamp)+1}getHighScore(){return this.scores.length>0?this.scores[0].score:0}getLeaderboard(){return this.scores.map((t,e)=>({rank:e+1,score:t.score,player:t.player,date:this.formatDate(t.date)}))}isNewRecord(t){return t>this.getHighScore()}isTopScore(t){return this.scores.length<this.maxRecords||t>this.scores[this.scores.length-1].score}formatDate(t){const e=new Date(t),a=new Date-e,i=Math.floor(a/864e5);return 0===i?"Today":1===i?"Yesterday":i<7?`${i} days ago`:e.toLocaleDateString()}clearLeaderboard(){this.scores=[],this.saveScores()}getStats(){if(0===this.scores.length)return{totalGames:0,averageScore:0,highScore:0,totalScore:0};const t=this.scores.reduce((t,e)=>t+e.score,0);return{totalGames:this.scores.length,averageScore:Math.round(t/this.scores.length),highScore:this.getHighScore(),totalScore:t}}exportData(){return{version:"1.0",exportDate:(new Date).toISOString(),scores:this.scores}}importData(t){try{if(t.version&&t.scores&&Array.isArray(t.scores))return this.scores=t.scores,this.saveScores(),!0}catch(e){console.warn("Failed to import data:",e)}return!1}};export{t as a,e as l};
